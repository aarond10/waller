#!/bin/sh /etc/rc.common
# Copyright (C) 2015 Yousong Zhou

START=60

USE_PROCD=1

ssh=/usr/bin/ssh
redsocks=/usr/sbin/redsocks
askpass=/usr/bin/omysocks-askpass

confdir=/var/etc/omysocks
conffile_ssh="$confdir/ssh_config"
conffile_rs="$confdir/redsocks.conf"

# listen ip:port redsocks block
g_rs_localip=
g_rs_localport=
# listen ip:port for ssh -D
g_listenip=
g_listenport=
g_loglevel=
g_runas=

__errmsg() {
	echo "ossherd: $*" >&2
}

service_triggers() {
	local n networks

	procd_open_trigger
	config_get networks ossherd networks
	for n in $networks; do
		procd_add_interface_trigger "interface.*" "$n" /etc/init.d/ossherd restart
	done
	procd_close_trigger
}

_redsocks_block() {
	local host="$1"
	local port="$2"
	local type_="$3"

	cat >>"$conffile_rs" <<EOF
redsocks {
	local_ip = ${g_rs_localip};
	local_port = ${g_rs_localport};
	ip = ${host};
	port = ${port};
	type = ${type_};
}
EOF
	g_rs_localport="$(($g_rs_localport + 1))"
}

_osocks() {
	local cfg="$1"
	local nclone
	local host port type_

	config_get nclone "$cfg" nclone 1
	[ "$nclone" -gt 0 ] || {
		__errmsg "$cfg: osocks is not enabled"
		return
	}

	config_get host "$cfg" host
	config_get port "$cfg" port
	config_get type_ "$cfg" type_ 'socks5'
	while [ "$nclone" -gt 0 ]; do
		_redsocks_block "$host" "$port" "$type_"
		nclone="$(($nclone - 1))"
	done
}

_ossheep_instance() {
	local user="$1"
	local pass="$2"
	local host="$3"
	local port="$4"
	local runas="$5"
	local vopts="$6"
	local listen="$7"
	local identity="$8"

	_redsocks_block "${listen%:*}" "${listen#*:}" "socks5"

	if [ -s "$identity" ]; then
		identity="-i $identity"
	else
		identity=""
	fi

	procd_open_instance
	procd_set_param command "$ssh" $vopts $identity -NT -F "$conffile_ssh" -D "$listen" -p "$port" -l "$user" "$host"
	[ -z "$pass" ] || procd_set_param env "DISPLAY=dummy:0" "SSH_ASKPASS=$askpass" "OMYSOCKS_PASSWORD=$pass"
	[ -z "$runas" ] || procd_set_param user "$runas"
	procd_set_param stderr 1
	procd_set_param respawn 3600 5 0
	procd_close_instance
}

_ossheep() {
	local cfg="$1"
	local user host port
	local runas vopts loglevel
	local nclone listen
	local pass identity

	config_get nclone "$cfg" nclone 1
	[ "$nclone" -gt 0 ] || {
		__errmsg "$cfg: ossheep is not enabled"
		return
	}

	config_get user "$cfg" user
	config_get host "$cfg" host
	[ -n "$user" -a -n "$host" ] || {
		__errmsg "$cfg: user@host cannot be empty"
		return
	}

	config_get pass "$cfg" pass
	config_get identity "$cfg" identity
	[ -n "$pass" -o -s "$identity" ] || {
		__errmsg "$cfg: provide either an identity file or password"
		return
	}

	config_get port "$cfg" port 22
	config_get runas "$cfg" runas "$g_runas"

	config_get loglevel "$cfg" loglevel "$g_loglevel"
	while [ "$loglevel" -gt 0 ]; do
		vopts="${vopts:--}v"
		loglevel="$(($loglevel - 1))"
	done

	while [ "$nclone" -gt 0 ]; do
		listen="$g_listenip:$g_listenport"
		g_listenport="$(($g_listenport + 1))"
		_ossheep_instance "$user" "$pass" "$host" "$port" "$runas" "$vopts" "$listen" "$identity"
		nclone="$(($nclone - 1))"
	done
}

_ossherd() {
	local baseconf

	if ! "$ssh" -V 2>&1 | grep -qi openssh; then
		__errmsg "only OpenSSH client is supported"
		return 1
	fi

	config_get g_listenip ossherd localip
	config_get g_listenport ossherd localport
	[ -n "$g_listenip" ] || g_listenip="127.0.0.1"
	[ -n "$g_listenport" ] || {
		__errmsg "cannot determine listen address for sheeps"
		return 1
	}

	config_get g_loglevel ossherd loglevel 0
	config_get g_runas ossherd runas 'nobody'

	mkdir -p "$confdir"
	rm -f "$conffile_ssh" "$conffile_rs"

	# prepare ssh_config
	config_get baseconf ossherd config
	[ -z "$baseconf" ] || {
		echo "$baseconf" >"$conffile_ssh"
	}
	touch "$conffile_ssh"

	# sheeps
	config_foreach _ossheep ossheep
}

_redsocks() {
	config_get g_rs_localip redsocks localip
	config_get g_rs_localport redsocks localport
	[ -n "$g_rs_localip" ] || g_rs_localip="127.0.0.1"
	[ -n "$g_rs_localport" ] || {
		__errmsg "cannot determine listen address for redsocks"
		return 1
	}

	# prepare redsocks.conf
	config_get baseconf redsocks baseconf
	echo "$baseconf" >"$conffile_rs"
}

start_service() {
	local sport eport

	config_load 'omysocks'

	_redsocks || return
	sport="$g_rs_localport"

	_ossherd
	config_foreach _osocks osocks
	eport="$(($g_rs_localport - 1))"

	# add the redsocks instance
	[ "$eport" -ge "$sport" ] || {
		__errmsg "no sheeps there?"
		return
	}
	procd_open_instance redsocks
	procd_set_param command "$redsocks" -c "$conffile_rs"
	procd_set_param respawn
	procd_set_param data "portrange=$sport-$eport"
	procd_close_instance

	# restart firewall
	OMYSOCKS_ACTION=setup OMYSOCKS_PORTRANGE="$sport-$eport" fw3 reload
}

stop_service() {
	# teardown firewall settings
	OMYSOCKS_ACTION=teardown fw3 reload
}
